name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  COVERAGE_RCFILE: ${{ secrets.COVERAGE_RCFILE }}
  LOCAL_REPO: github-action:latest
  ECR_REPO: ${{ secrets.ECR_REPO }}:latest

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Cache Poetry
      uses: actions/cache@v1
      with:
        path: ~/.poetry
        key: ${{ runner.os }}-build-cache-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-cache-poetry-

    - name: Cache pip
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Poetry
      run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python

    - name: Poetry export requirements.txt
      run: ~/.poetry/bin/poetry export -f requirements.txt > requirements.txt

    - name: Build Docker Image
      run: |
        aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 083285518307.dkr.ecr.ap-northeast-2.amazonaws.com/github-action
        docker pull ${{ env.ECR_REPO }} || true
        docker build -t ${{ env.LOCAL_REPO }} .

    - name: pytest
      run: docker run --rm ${{ env.LOCAL_REPO }} coverage run --source='.' -m pytest app

    - name: Push DockerImage
      run: |
        docker tag ${{ env.LOCAL_REPO }} ${{ env.ECR_REPO }}
        docker push ${{ env.ECR_REPO }}

    - name: ECS UpdateService
      run: aws ecs update-service --region ap-northeast-2 --cluster GitHub-Action-Cluster --service GitHub-Action-Service

    - name: Codecov
      run: docker run --rm ${{ env.LOCAL_REPO }} /bin/bash -c "cd app && coverage run -m pytest && codecov --token=${{ env.CODECOV_TOKEN }}"
